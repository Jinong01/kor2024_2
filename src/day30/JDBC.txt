[ JDBC ]
Java Database Connect

DAO - 데이터 접근 객체 , 파일/DB에 접근하여 데이터를 가져올 때 사용
DTO - 데이터 이동 객체 , 파일/DB에 접근하여 가져온 데이터를 VIEW 이동하기 위해 사용
VO - 값 자체 객체, 읽기모드=setter 없음

Class.forName("com.mysql.cj.jdbc.Driver");
connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/데이터베이스명" , "계정명" , "비밀번호");

인터페이스 - 동일한 목적하의 서로 다른 행위/메소드를 조작
    각 게임을 객체로 생각하고 객체를 인터페이스에 대입하여 서로 다른 게임을 하나의 인터페이스로 조각
    키보드는 같은 키 이지만 게임 마다 다른 기능이 나간다.

JDBC 핵심 인터페이스 3개
    Connection : DB 와 연동 성공한 객체 정보를 가지고 조작/기능/메소드 제공하는 인터페이스
        Connection connection = DriverManager.getConnection(mysql)
        Connection connection = DriverManager.getConnection(oracle)
        Connection connection = DriverManager.getConnection(mariaDB)

        (1) conn.prepareStatement(SQL 문자열); : 기재한 SQL 을 매개변수로 전달하면 기재한 SQL 을 조작/기능/메소드 제공 객체 변환

    PreparedStatement : 기재된 SQL 을 조작/메소드 제공하는 메소드
        (1) ps.setXX(?,value)
            -> XX : 타입 , ? : 기재된 SQL 내 ?의 순서번호 , value : 앞 매개변수 ? 에 대입할 값

        (2) ps.executeUpdate() , 현재 기재된 SQL 을 실행하는 함수
        (3) ps.executeQuery() , 현재 기재된 SQL 을 실행하고 조회된 결과를 반환하는 함수

    ResultSet : 기재된 SQL 을 조작하는 함수
        (1) rs.next() : 조회된 결과의 다음 레코드 이동 함수
            만약에 다음 레코드가 존재하면 true , 존재하지 않으면 false
        (2) rs.getXX("필드명") : 현재 조회중인 레코드의 지정한 필드명의 값 호출
            XX : 호출할 데이터의 타입
